from aiogram import executor
from main_functions import *

# ms - —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Message(), –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: —É–¥–∞–ª–µ–Ω–∏–µ–º, –æ—Ç–ø—Ä–∞–≤–∫–æ–π..
# db - —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Database(), –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


@dp.message_handler(commands=['start'])  # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ /start, —Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è
async def start(message: types.Message):
    if db.user_exists(message.from_user.id):  # FIXME -> –≠–¢–£ –°–¢–†–û–ß–ö–£ –ù–£–ñ–ù–û –ë–£–î–ï–¢ –£–î–ê–õ–ò–¢–¨, –û–ù–ê –ù–£–ñ–ù–ê –î–õ–Ø –¢–û–ì–û, –ß–¢–û–ë–´ –ù–ï –í–ü–£–°–ö–ê–¢–¨ –õ–Æ–î–ï–ô, –í–†–ï–ú–ï–ù–ù–û!
        await ms.output_text(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name})\n{read_text_file("Information/–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")}',
                             message, "info_menu")
        if not db.user_exists(message.from_user.id):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–¥
            db.add_user(message.from_user.id)  # –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º


@dp.message_handler(content_types=['text'])
async def main_work(message: types.Message):
    if message.text == "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è ü•∏":
        async def send_main_menu(report):
            await bot.send_photo(report.from_user.id, open("Information/USE_tasks_materials.png", mode="rb"),
                                 caption="<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ –ï–ì–≠ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å:</b>",
                                 parse_mode="HTML", reply_markup=nav.main_menu)

        await send_main_menu(message)

        @dp.callback_query_handler(text='btn_number_1')
        async def number_1(osn_base: types.CallbackQuery):
            await ms.output_of_quiz_kind(1, osn_base, "quiz_menu")

            @dp.callback_query_handler(text='btn_quiz_option_1')
            async def quiz_option_1(option_1: types.CallbackQuery):
                """ –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã """
                await ms.output_any_random_quiz(task_number=1, human_id=option_1)

            @dp.callback_query_handler(text='btn_quiz_option_2')
            async def quiz_option_2(option_2: types.CallbackQuery):
                """ –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã """
                await ms.output_random_unsolved_quiz(task_number=1, human_id=option_2)

            @dp.callback_query_handler(text='btn_main_back')
            async def back_main_menu(back: types.CallbackQuery):
                """ –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –º–µ–Ω—é –±–∞–∑—ã """
                await ms.del_last_message(back)
                await send_main_menu(back)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
